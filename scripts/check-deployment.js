#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n de despliegue...\n');

// Verificar archivos necesarios
const requiredFiles = [
  'package.json',
  'next.config.js',
  'Dockerfile',
  'src/app/page.tsx',
  'src/app/layout.tsx'
];

let allFilesExist = true;

requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

console.log('\nüìã Verificando configuraci√≥n de Next.js...');

// Verificar next.config.js
try {
  const nextConfig = require('../next.config.js');
  if (nextConfig.output === 'standalone') {
    console.log('‚úÖ output: standalone configurado correctamente');
  } else {
    console.log('‚ùå output: standalone no est√° configurado');
  }
} catch (error) {
  console.log('‚ùå Error al leer next.config.js:', error.message);
}

// Verificar package.json
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  if (packageJson.scripts.start) {
    console.log('‚úÖ script start configurado:', packageJson.scripts.start);
  } else {
    console.log('‚ùå script start no encontrado');
  }
} catch (error) {
  console.log('‚ùå Error al leer package.json:', error.message);
}

// Verificar Dockerfile
try {
  const dockerfile = fs.readFileSync('Dockerfile', 'utf8');
  if (dockerfile.includes('FROM node:18-alpine')) {
    console.log('‚úÖ Dockerfile configurado correctamente');
  } else {
    console.log('‚ùå Dockerfile no tiene la configuraci√≥n correcta');
  }
  
  if (dockerfile.includes('output: standalone')) {
    console.log('‚úÖ Dockerfile incluye configuraci√≥n standalone');
  } else {
    console.log('‚ùå Dockerfile no incluye configuraci√≥n standalone');
  }
} catch (error) {
  console.log('‚ùå Error al leer Dockerfile:', error.message);
}

console.log('\nüéØ Resumen:');
if (allFilesExist) {
  console.log('‚úÖ Todos los archivos necesarios est√°n presentes');
  console.log('üöÄ Tu aplicaci√≥n est√° lista para desplegarse en Render');
} else {
  console.log('‚ùå Faltan algunos archivos necesarios');
  console.log('‚ö†Ô∏è  Por favor, verifica que todos los archivos est√©n presentes');
}

console.log('\nüìù Pasos para el despliegue en Render (Versi√≥n Gratuita):');
console.log('1. Haz commit de todos los cambios');
console.log('2. Sube los cambios a tu repositorio');
console.log('3. Ve a render.com y crea un nuevo Web Service');
console.log('4. Configura manualmente:');
console.log('   - Environment: Docker');
console.log('   - Variables de entorno: NODE_ENV=production, PORT=3000');
console.log('   - Health Check Path: /');
console.log('5. Render detectar√° autom√°ticamente el Dockerfile y har√° el build');
console.log('6. Verifica los logs en el dashboard de Render'); 